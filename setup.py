from setuptools import setup, Extension
import configparser
import numpy
import os
import pathlib
import platform
import sys

with open("VERSION","rt") as f:
    VERSION = f.readline().strip()

libdirs = []
incdirs = []
libraries = ['g2c']

# ----------------------------------------------------------------------------------------
# find_library.
# ----------------------------------------------------------------------------------------
def find_library(name, dirs=None):
    out = []
    sysinfo = (os.name, sys.platform)
    if sysinfo == ('posix', 'darwin'):
        libext = '.dylib'
    elif sysinfo == ('posix', 'linux'):
        libext = '.so'
    if dirs is None:
        if os.environ.get('CONDA_PREFIX'):
            dirs = [os.environ['CONDA_PREFIX']]
        else:
            dirs = ['/usr/local', '/sw', '/opt', '/opt/local', '/opt/homebrew', '/usr']
    for d in dirs:
        libs = pathlib.Path(d).rglob('lib*'+name+libext)
        for l in libs:
            out.append(l.absolute().resolve().as_posix())
    return list(set(out))[0]

# ----------------------------------------------------------------------------------------
# Build Cython sources
# ----------------------------------------------------------------------------------------
from Cython.Distutils import build_ext
cmdclass = {'build_ext': build_ext}
redtoreg_pyx = 'redtoreg.pyx'
g2clib_pyx  = 'g2clib.pyx'

# ---------------------------------------------------------------------------------------- 
# Read setup.cfg
# ----------------------------------------------------------------------------------------
setup_cfg = 'setup.cfg'
config = configparser.ConfigParser()
config.read(setup_cfg)

# ---------------------------------------------------------------------------------------- 
# Get NCEPLIBS-g2c library info.
# ---------------------------------------------------------------------------------------- 
if os.environ.get('G2C_DIR'):
    g2c_dir = os.environ.get('G2C_DIR')
    if os.path.exists(os.path.join(g2c_dir,'lib')):
        g2c_libdir = os.path.join(g2c_dir,'lib')
    elif os.path.exists(os.path.join(g2c_dir,'lib64')):
        g2c_libdir = os.path.join(g2c_dir,'lib64')
    g2c_incdir = os.path.join(g2c_dir,'include')
else:
    g2c_dir = config.get('directories','g2c_dir',fallback=None)
    if g2c_dir is None:
       g2c_libdir = os.path.dirname(find_library('g2c'))
       g2c_incdir = os.path.join(os.path.dirname(g2c_libdir),'include')
libdirs.append(g2c_libdir)
incdirs.append(g2c_incdir)

libdirs = list(set(libdirs))
incdirs = list(set(incdirs))
incdirs.append(numpy.get_include())

# ----------------------------------------------------------------------------------------
# Define extensions
# ----------------------------------------------------------------------------------------
g2clibext = Extension('grib2io.g2clib',[g2clib_pyx],include_dirs=incdirs,\
            library_dirs=libdirs,libraries=libraries,runtime_library_dirs=libdirs)
redtoregext = Extension('grib2io.redtoreg',[redtoreg_pyx],include_dirs=[numpy.get_include()])

# ----------------------------------------------------------------------------------------
# Create __config__.py
# ----------------------------------------------------------------------------------------
cnt = \
"""# This file is generated by grib2io's setup.py
# It contains configuration information when building this package.
grib2io_version = '%(grib2io_version)s'
"""
a = open('grib2io/__config__.py','w')
cfgdict = {}
cfgdict['grib2io_version'] = VERSION
try:
    a.write(cnt % cfgdict)
finally:
    a.close()

# ----------------------------------------------------------------------------------------
# Import README.md as PyPi long_description
# ----------------------------------------------------------------------------------------
this_directory = os.path.abspath(os.path.dirname(__file__))
with open(os.path.join(this_directory, 'README.md'), encoding='utf-8') as f:
    long_description = f.read()

# ----------------------------------------------------------------------------------------
# Run setup.py.  See pyproject.toml for package metadata.
# ----------------------------------------------------------------------------------------
setup(ext_modules = [g2clibext,redtoregext],
      cmdclass = cmdclass,
      long_description = long_description,
      long_description_content_type = 'text/markdown')
